// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/proto/examplepb/a_bit_of_everything.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import pathenum "github.com/grpc-ecosystem/grpc-gateway/examples/proto/pathenum"
import sub "github.com/grpc-ecosystem/grpc-gateway/examples/proto/sub"
import sub2 "github.com/grpc-ecosystem/grpc-gateway/examples/proto/sub2"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import field_mask "google.golang.org/genproto/protobuf/field_mask"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NumericEnum is one or zero.
type NumericEnum int32

const (
	// ZERO means 0
	NumericEnum_ZERO NumericEnum = 0
	// ONE means 1
	NumericEnum_ONE NumericEnum = 1
)

var NumericEnum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
}
var NumericEnum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
}

func (x NumericEnum) String() string {
	return proto.EnumName(NumericEnum_name, int32(x))
}
func (NumericEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{0}
}

// DeepEnum is one or zero.
type ABitOfEverything_Nested_DeepEnum int32

const (
	// FALSE is false.
	ABitOfEverything_Nested_FALSE ABitOfEverything_Nested_DeepEnum = 0
	// TRUE is true.
	ABitOfEverything_Nested_TRUE ABitOfEverything_Nested_DeepEnum = 1
)

var ABitOfEverything_Nested_DeepEnum_name = map[int32]string{
	0: "FALSE",
	1: "TRUE",
}
var ABitOfEverything_Nested_DeepEnum_value = map[string]int32{
	"FALSE": 0,
	"TRUE":  1,
}

func (x ABitOfEverything_Nested_DeepEnum) String() string {
	return proto.EnumName(ABitOfEverything_Nested_DeepEnum_name, int32(x))
}
func (ABitOfEverything_Nested_DeepEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{0, 0, 0}
}

// Intentionaly complicated message type to cover many features of Protobuf.
// NEXT ID: 30
type ABitOfEverything struct {
	SingleNested        *ABitOfEverything_Nested                `protobuf:"bytes,25,opt,name=single_nested,json=singleNested,proto3" json:"single_nested,omitempty"`
	Uuid                string                                  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Nested              []*ABitOfEverything_Nested              `protobuf:"bytes,2,rep,name=nested,proto3" json:"nested,omitempty"`
	FloatValue          float32                                 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue         float64                                 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Int64Value          int64                                   `protobuf:"varint,5,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint64Value         uint64                                  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Int32Value          int32                                   `protobuf:"varint,7,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Fixed64Value        uint64                                  `protobuf:"fixed64,8,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Fixed32Value        uint32                                  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	BoolValue           bool                                    `protobuf:"varint,10,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue         string                                  `protobuf:"bytes,11,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue          []byte                                  `protobuf:"bytes,29,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	Uint32Value         uint32                                  `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	EnumValue           NumericEnum                             `protobuf:"varint,14,opt,name=enum_value,json=enumValue,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"enum_value,omitempty"`
	PathEnumValue       pathenum.PathEnum                       `protobuf:"varint,30,opt,name=path_enum_value,json=pathEnumValue,proto3,enum=grpc.gateway.examples.pathenum.PathEnum" json:"path_enum_value,omitempty"`
	NestedPathEnumValue pathenum.MessagePathEnum_NestedPathEnum `protobuf:"varint,31,opt,name=nested_path_enum_value,json=nestedPathEnumValue,proto3,enum=grpc.gateway.examples.pathenum.MessagePathEnum_NestedPathEnum" json:"nested_path_enum_value,omitempty"`
	Sfixed32Value       int32                                   `protobuf:"fixed32,15,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value       int64                                   `protobuf:"fixed64,16,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	Sint32Value         int32                                   `protobuf:"zigzag32,17,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value         int64                                   `protobuf:"zigzag64,18,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	RepeatedStringValue []string                                `protobuf:"bytes,19,rep,name=repeated_string_value,json=repeatedStringValue,proto3" json:"repeated_string_value,omitempty"`
	// Types that are valid to be assigned to OneofValue:
	//	*ABitOfEverything_OneofEmpty
	//	*ABitOfEverything_OneofString
	OneofValue               isABitOfEverything_OneofValue       `protobuf_oneof:"oneof_value"`
	MapValue                 map[string]NumericEnum              `protobuf:"bytes,22,rep,name=map_value,json=mapValue,proto3" json:"map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum"`
	MappedStringValue        map[string]string                   `protobuf:"bytes,23,rep,name=mapped_string_value,json=mappedStringValue,proto3" json:"mapped_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MappedNestedValue        map[string]*ABitOfEverything_Nested `protobuf:"bytes,24,rep,name=mapped_nested_value,json=mappedNestedValue,proto3" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NonConventionalNameValue string                              `protobuf:"bytes,26,opt,name=nonConventionalNameValue,proto3" json:"nonConventionalNameValue,omitempty"`
	TimestampValue           *timestamp.Timestamp                `protobuf:"bytes,27,opt,name=timestamp_value,json=timestampValue,proto3" json:"timestamp_value,omitempty"`
	// repeated enum value. it is comma-separated in query
	RepeatedEnumValue []NumericEnum `protobuf:"varint,28,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"repeated_enum_value,omitempty"`
	// repeated numeric enum comment (This comment is overridden by the field annotation)
	RepeatedEnumAnnotation []NumericEnum `protobuf:"varint,32,rep,packed,name=repeated_enum_annotation,json=repeatedEnumAnnotation,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"repeated_enum_annotation,omitempty"`
	// numeric enum comment (This comment is overridden by the field annotation)
	EnumValueAnnotation NumericEnum `protobuf:"varint,33,opt,name=enum_value_annotation,json=enumValueAnnotation,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"enum_value_annotation,omitempty"`
	// repeated string comment (This comment is overridden by the field annotation)
	RepeatedStringAnnotation []string `protobuf:"bytes,34,rep,name=repeated_string_annotation,json=repeatedStringAnnotation,proto3" json:"repeated_string_annotation,omitempty"`
	// repeated nested object comment (This comment is overridden by the field annotation)
	RepeatedNestedAnnotation []*ABitOfEverything_Nested `protobuf:"bytes,35,rep,name=repeated_nested_annotation,json=repeatedNestedAnnotation,proto3" json:"repeated_nested_annotation,omitempty"`
	// nested object comments (This comment is overridden by the field annotation)
	NestedAnnotation     *ABitOfEverything_Nested `protobuf:"bytes,36,opt,name=nested_annotation,json=nestedAnnotation,proto3" json:"nested_annotation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ABitOfEverything) Reset()         { *m = ABitOfEverything{} }
func (m *ABitOfEverything) String() string { return proto.CompactTextString(m) }
func (*ABitOfEverything) ProtoMessage()    {}
func (*ABitOfEverything) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{0}
}
func (m *ABitOfEverything) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ABitOfEverything.Unmarshal(m, b)
}
func (m *ABitOfEverything) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ABitOfEverything.Marshal(b, m, deterministic)
}
func (dst *ABitOfEverything) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABitOfEverything.Merge(dst, src)
}
func (m *ABitOfEverything) XXX_Size() int {
	return xxx_messageInfo_ABitOfEverything.Size(m)
}
func (m *ABitOfEverything) XXX_DiscardUnknown() {
	xxx_messageInfo_ABitOfEverything.DiscardUnknown(m)
}

var xxx_messageInfo_ABitOfEverything proto.InternalMessageInfo

func (m *ABitOfEverything) GetSingleNested() *ABitOfEverything_Nested {
	if m != nil {
		return m.SingleNested
	}
	return nil
}

func (m *ABitOfEverything) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ABitOfEverything) GetNested() []*ABitOfEverything_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *ABitOfEverything) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *ABitOfEverything) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *ABitOfEverything) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *ABitOfEverything) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

func (m *ABitOfEverything) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *ABitOfEverything) GetFixed64Value() uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return 0
}

func (m *ABitOfEverything) GetFixed32Value() uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return 0
}

func (m *ABitOfEverything) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *ABitOfEverything) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *ABitOfEverything) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *ABitOfEverything) GetUint32Value() uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return 0
}

func (m *ABitOfEverything) GetEnumValue() NumericEnum {
	if m != nil {
		return m.EnumValue
	}
	return NumericEnum_ZERO
}

func (m *ABitOfEverything) GetPathEnumValue() pathenum.PathEnum {
	if m != nil {
		return m.PathEnumValue
	}
	return pathenum.PathEnum_ABC
}

func (m *ABitOfEverything) GetNestedPathEnumValue() pathenum.MessagePathEnum_NestedPathEnum {
	if m != nil {
		return m.NestedPathEnumValue
	}
	return pathenum.MessagePathEnum_GHI
}

func (m *ABitOfEverything) GetSfixed32Value() int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return 0
}

func (m *ABitOfEverything) GetSfixed64Value() int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return 0
}

func (m *ABitOfEverything) GetSint32Value() int32 {
	if m != nil {
		return m.Sint32Value
	}
	return 0
}

func (m *ABitOfEverything) GetSint64Value() int64 {
	if m != nil {
		return m.Sint64Value
	}
	return 0
}

func (m *ABitOfEverything) GetRepeatedStringValue() []string {
	if m != nil {
		return m.RepeatedStringValue
	}
	return nil
}

type isABitOfEverything_OneofValue interface {
	isABitOfEverything_OneofValue()
}

type ABitOfEverything_OneofEmpty struct {
	OneofEmpty *empty.Empty `protobuf:"bytes,20,opt,name=oneof_empty,json=oneofEmpty,proto3,oneof"`
}

type ABitOfEverything_OneofString struct {
	OneofString string `protobuf:"bytes,21,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

func (*ABitOfEverything_OneofEmpty) isABitOfEverything_OneofValue() {}

func (*ABitOfEverything_OneofString) isABitOfEverything_OneofValue() {}

func (m *ABitOfEverything) GetOneofValue() isABitOfEverything_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (m *ABitOfEverything) GetOneofEmpty() *empty.Empty {
	if x, ok := m.GetOneofValue().(*ABitOfEverything_OneofEmpty); ok {
		return x.OneofEmpty
	}
	return nil
}

func (m *ABitOfEverything) GetOneofString() string {
	if x, ok := m.GetOneofValue().(*ABitOfEverything_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (m *ABitOfEverything) GetMapValue() map[string]NumericEnum {
	if m != nil {
		return m.MapValue
	}
	return nil
}

func (m *ABitOfEverything) GetMappedStringValue() map[string]string {
	if m != nil {
		return m.MappedStringValue
	}
	return nil
}

func (m *ABitOfEverything) GetMappedNestedValue() map[string]*ABitOfEverything_Nested {
	if m != nil {
		return m.MappedNestedValue
	}
	return nil
}

func (m *ABitOfEverything) GetNonConventionalNameValue() string {
	if m != nil {
		return m.NonConventionalNameValue
	}
	return ""
}

func (m *ABitOfEverything) GetTimestampValue() *timestamp.Timestamp {
	if m != nil {
		return m.TimestampValue
	}
	return nil
}

func (m *ABitOfEverything) GetRepeatedEnumValue() []NumericEnum {
	if m != nil {
		return m.RepeatedEnumValue
	}
	return nil
}

func (m *ABitOfEverything) GetRepeatedEnumAnnotation() []NumericEnum {
	if m != nil {
		return m.RepeatedEnumAnnotation
	}
	return nil
}

func (m *ABitOfEverything) GetEnumValueAnnotation() NumericEnum {
	if m != nil {
		return m.EnumValueAnnotation
	}
	return NumericEnum_ZERO
}

func (m *ABitOfEverything) GetRepeatedStringAnnotation() []string {
	if m != nil {
		return m.RepeatedStringAnnotation
	}
	return nil
}

func (m *ABitOfEverything) GetRepeatedNestedAnnotation() []*ABitOfEverything_Nested {
	if m != nil {
		return m.RepeatedNestedAnnotation
	}
	return nil
}

func (m *ABitOfEverything) GetNestedAnnotation() *ABitOfEverything_Nested {
	if m != nil {
		return m.NestedAnnotation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ABitOfEverything) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ABitOfEverything_OneofMarshaler, _ABitOfEverything_OneofUnmarshaler, _ABitOfEverything_OneofSizer, []interface{}{
		(*ABitOfEverything_OneofEmpty)(nil),
		(*ABitOfEverything_OneofString)(nil),
	}
}

func _ABitOfEverything_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ABitOfEverything)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *ABitOfEverything_OneofEmpty:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OneofEmpty); err != nil {
			return err
		}
	case *ABitOfEverything_OneofString:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.OneofString)
	case nil:
	default:
		return fmt.Errorf("ABitOfEverything.OneofValue has unexpected type %T", x)
	}
	return nil
}

func _ABitOfEverything_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ABitOfEverything)
	switch tag {
	case 20: // oneof_value.oneof_empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(empty.Empty)
		err := b.DecodeMessage(msg)
		m.OneofValue = &ABitOfEverything_OneofEmpty{msg}
		return true, err
	case 21: // oneof_value.oneof_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneofValue = &ABitOfEverything_OneofString{x}
		return true, err
	default:
		return false, nil
	}
}

func _ABitOfEverything_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ABitOfEverything)
	// oneof_value
	switch x := m.OneofValue.(type) {
	case *ABitOfEverything_OneofEmpty:
		s := proto.Size(x.OneofEmpty)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ABitOfEverything_OneofString:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.OneofString)))
		n += len(x.OneofString)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Nested is nested type.
type ABitOfEverything_Nested struct {
	// name is nested field.
	Name                 string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amount               uint32                           `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Ok                   ABitOfEverything_Nested_DeepEnum `protobuf:"varint,3,opt,name=ok,proto3,enum=grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ABitOfEverything_Nested) Reset()         { *m = ABitOfEverything_Nested{} }
func (m *ABitOfEverything_Nested) String() string { return proto.CompactTextString(m) }
func (*ABitOfEverything_Nested) ProtoMessage()    {}
func (*ABitOfEverything_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{0, 0}
}
func (m *ABitOfEverything_Nested) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ABitOfEverything_Nested.Unmarshal(m, b)
}
func (m *ABitOfEverything_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ABitOfEverything_Nested.Marshal(b, m, deterministic)
}
func (dst *ABitOfEverything_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABitOfEverything_Nested.Merge(dst, src)
}
func (m *ABitOfEverything_Nested) XXX_Size() int {
	return xxx_messageInfo_ABitOfEverything_Nested.Size(m)
}
func (m *ABitOfEverything_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_ABitOfEverything_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_ABitOfEverything_Nested proto.InternalMessageInfo

func (m *ABitOfEverything_Nested) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ABitOfEverything_Nested) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ABitOfEverything_Nested) GetOk() ABitOfEverything_Nested_DeepEnum {
	if m != nil {
		return m.Ok
	}
	return ABitOfEverything_Nested_FALSE
}

// ABitOfEverythingRepeated is used to validate repeated path parameter functionality
type ABitOfEverythingRepeated struct {
	// repeated values. they are comma-separated in path
	PathRepeatedFloatValue    []float32     `protobuf:"fixed32,1,rep,packed,name=path_repeated_float_value,json=pathRepeatedFloatValue,proto3" json:"path_repeated_float_value,omitempty"`
	PathRepeatedDoubleValue   []float64     `protobuf:"fixed64,2,rep,packed,name=path_repeated_double_value,json=pathRepeatedDoubleValue,proto3" json:"path_repeated_double_value,omitempty"`
	PathRepeatedInt64Value    []int64       `protobuf:"varint,3,rep,packed,name=path_repeated_int64_value,json=pathRepeatedInt64Value,proto3" json:"path_repeated_int64_value,omitempty"`
	PathRepeatedUint64Value   []uint64      `protobuf:"varint,4,rep,packed,name=path_repeated_uint64_value,json=pathRepeatedUint64Value,proto3" json:"path_repeated_uint64_value,omitempty"`
	PathRepeatedInt32Value    []int32       `protobuf:"varint,5,rep,packed,name=path_repeated_int32_value,json=pathRepeatedInt32Value,proto3" json:"path_repeated_int32_value,omitempty"`
	PathRepeatedFixed64Value  []uint64      `protobuf:"fixed64,6,rep,packed,name=path_repeated_fixed64_value,json=pathRepeatedFixed64Value,proto3" json:"path_repeated_fixed64_value,omitempty"`
	PathRepeatedFixed32Value  []uint32      `protobuf:"fixed32,7,rep,packed,name=path_repeated_fixed32_value,json=pathRepeatedFixed32Value,proto3" json:"path_repeated_fixed32_value,omitempty"`
	PathRepeatedBoolValue     []bool        `protobuf:"varint,8,rep,packed,name=path_repeated_bool_value,json=pathRepeatedBoolValue,proto3" json:"path_repeated_bool_value,omitempty"`
	PathRepeatedStringValue   []string      `protobuf:"bytes,9,rep,name=path_repeated_string_value,json=pathRepeatedStringValue,proto3" json:"path_repeated_string_value,omitempty"`
	PathRepeatedBytesValue    [][]byte      `protobuf:"bytes,10,rep,name=path_repeated_bytes_value,json=pathRepeatedBytesValue,proto3" json:"path_repeated_bytes_value,omitempty"`
	PathRepeatedUint32Value   []uint32      `protobuf:"varint,11,rep,packed,name=path_repeated_uint32_value,json=pathRepeatedUint32Value,proto3" json:"path_repeated_uint32_value,omitempty"`
	PathRepeatedEnumValue     []NumericEnum `protobuf:"varint,12,rep,packed,name=path_repeated_enum_value,json=pathRepeatedEnumValue,proto3,enum=grpc.gateway.examples.examplepb.NumericEnum" json:"path_repeated_enum_value,omitempty"`
	PathRepeatedSfixed32Value []int32       `protobuf:"fixed32,13,rep,packed,name=path_repeated_sfixed32_value,json=pathRepeatedSfixed32Value,proto3" json:"path_repeated_sfixed32_value,omitempty"`
	PathRepeatedSfixed64Value []int64       `protobuf:"fixed64,14,rep,packed,name=path_repeated_sfixed64_value,json=pathRepeatedSfixed64Value,proto3" json:"path_repeated_sfixed64_value,omitempty"`
	PathRepeatedSint32Value   []int32       `protobuf:"zigzag32,15,rep,packed,name=path_repeated_sint32_value,json=pathRepeatedSint32Value,proto3" json:"path_repeated_sint32_value,omitempty"`
	PathRepeatedSint64Value   []int64       `protobuf:"zigzag64,16,rep,packed,name=path_repeated_sint64_value,json=pathRepeatedSint64Value,proto3" json:"path_repeated_sint64_value,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}      `json:"-"`
	XXX_unrecognized          []byte        `json:"-"`
	XXX_sizecache             int32         `json:"-"`
}

func (m *ABitOfEverythingRepeated) Reset()         { *m = ABitOfEverythingRepeated{} }
func (m *ABitOfEverythingRepeated) String() string { return proto.CompactTextString(m) }
func (*ABitOfEverythingRepeated) ProtoMessage()    {}
func (*ABitOfEverythingRepeated) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{1}
}
func (m *ABitOfEverythingRepeated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ABitOfEverythingRepeated.Unmarshal(m, b)
}
func (m *ABitOfEverythingRepeated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ABitOfEverythingRepeated.Marshal(b, m, deterministic)
}
func (dst *ABitOfEverythingRepeated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABitOfEverythingRepeated.Merge(dst, src)
}
func (m *ABitOfEverythingRepeated) XXX_Size() int {
	return xxx_messageInfo_ABitOfEverythingRepeated.Size(m)
}
func (m *ABitOfEverythingRepeated) XXX_DiscardUnknown() {
	xxx_messageInfo_ABitOfEverythingRepeated.DiscardUnknown(m)
}

var xxx_messageInfo_ABitOfEverythingRepeated proto.InternalMessageInfo

func (m *ABitOfEverythingRepeated) GetPathRepeatedFloatValue() []float32 {
	if m != nil {
		return m.PathRepeatedFloatValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedDoubleValue() []float64 {
	if m != nil {
		return m.PathRepeatedDoubleValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedInt64Value() []int64 {
	if m != nil {
		return m.PathRepeatedInt64Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedUint64Value() []uint64 {
	if m != nil {
		return m.PathRepeatedUint64Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedInt32Value() []int32 {
	if m != nil {
		return m.PathRepeatedInt32Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedFixed64Value() []uint64 {
	if m != nil {
		return m.PathRepeatedFixed64Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedFixed32Value() []uint32 {
	if m != nil {
		return m.PathRepeatedFixed32Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedBoolValue() []bool {
	if m != nil {
		return m.PathRepeatedBoolValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedStringValue() []string {
	if m != nil {
		return m.PathRepeatedStringValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedBytesValue() [][]byte {
	if m != nil {
		return m.PathRepeatedBytesValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedUint32Value() []uint32 {
	if m != nil {
		return m.PathRepeatedUint32Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedEnumValue() []NumericEnum {
	if m != nil {
		return m.PathRepeatedEnumValue
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedSfixed32Value() []int32 {
	if m != nil {
		return m.PathRepeatedSfixed32Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedSfixed64Value() []int64 {
	if m != nil {
		return m.PathRepeatedSfixed64Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedSint32Value() []int32 {
	if m != nil {
		return m.PathRepeatedSint32Value
	}
	return nil
}

func (m *ABitOfEverythingRepeated) GetPathRepeatedSint64Value() []int64 {
	if m != nil {
		return m.PathRepeatedSint64Value
	}
	return nil
}

type Body struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Body) Reset()         { *m = Body{} }
func (m *Body) String() string { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()    {}
func (*Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{2}
}
func (m *Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Body.Unmarshal(m, b)
}
func (m *Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Body.Marshal(b, m, deterministic)
}
func (dst *Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Body.Merge(dst, src)
}
func (m *Body) XXX_Size() int {
	return xxx_messageInfo_Body.Size(m)
}
func (m *Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Body proto.InternalMessageInfo

func (m *Body) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MessageWithBody struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 *Body    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageWithBody) Reset()         { *m = MessageWithBody{} }
func (m *MessageWithBody) String() string { return proto.CompactTextString(m) }
func (*MessageWithBody) ProtoMessage()    {}
func (*MessageWithBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{3}
}
func (m *MessageWithBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageWithBody.Unmarshal(m, b)
}
func (m *MessageWithBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageWithBody.Marshal(b, m, deterministic)
}
func (dst *MessageWithBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageWithBody.Merge(dst, src)
}
func (m *MessageWithBody) XXX_Size() int {
	return xxx_messageInfo_MessageWithBody.Size(m)
}
func (m *MessageWithBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageWithBody.DiscardUnknown(m)
}

var xxx_messageInfo_MessageWithBody proto.InternalMessageInfo

func (m *MessageWithBody) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageWithBody) GetData() *Body {
	if m != nil {
		return m.Data
	}
	return nil
}

// UpdateV2Request request for update includes the message and the update mask
type UpdateV2Request struct {
	Abe                  *ABitOfEverything     `protobuf:"bytes,1,opt,name=abe,proto3" json:"abe,omitempty"`
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateV2Request) Reset()         { *m = UpdateV2Request{} }
func (m *UpdateV2Request) String() string { return proto.CompactTextString(m) }
func (*UpdateV2Request) ProtoMessage()    {}
func (*UpdateV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3, []int{4}
}
func (m *UpdateV2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateV2Request.Unmarshal(m, b)
}
func (m *UpdateV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateV2Request.Marshal(b, m, deterministic)
}
func (dst *UpdateV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateV2Request.Merge(dst, src)
}
func (m *UpdateV2Request) XXX_Size() int {
	return xxx_messageInfo_UpdateV2Request.Size(m)
}
func (m *UpdateV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateV2Request proto.InternalMessageInfo

func (m *UpdateV2Request) GetAbe() *ABitOfEverything {
	if m != nil {
		return m.Abe
	}
	return nil
}

func (m *UpdateV2Request) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*ABitOfEverything)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything")
	proto.RegisterMapType((map[string]NumericEnum)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything.MapValueEntry")
	proto.RegisterMapType((map[string]*ABitOfEverything_Nested)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything.MappedNestedValueEntry")
	proto.RegisterMapType((map[string]string)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything.MappedStringValueEntry")
	proto.RegisterType((*ABitOfEverything_Nested)(nil), "grpc.gateway.examples.examplepb.ABitOfEverything.Nested")
	proto.RegisterType((*ABitOfEverythingRepeated)(nil), "grpc.gateway.examples.examplepb.ABitOfEverythingRepeated")
	proto.RegisterType((*Body)(nil), "grpc.gateway.examples.examplepb.Body")
	proto.RegisterType((*MessageWithBody)(nil), "grpc.gateway.examples.examplepb.MessageWithBody")
	proto.RegisterType((*UpdateV2Request)(nil), "grpc.gateway.examples.examplepb.UpdateV2Request")
	proto.RegisterEnum("grpc.gateway.examples.examplepb.NumericEnum", NumericEnum_name, NumericEnum_value)
	proto.RegisterEnum("grpc.gateway.examples.examplepb.ABitOfEverything_Nested_DeepEnum", ABitOfEverything_Nested_DeepEnum_name, ABitOfEverything_Nested_DeepEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ABitOfEverythingServiceClient is the client API for ABitOfEverythingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABitOfEverythingServiceClient interface {
	// Create a new ABitOfEverything
	//
	// This API creates a new ABitOfEverything
	Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error)
	Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateV2(ctx context.Context, in *UpdateV2Request, opts ...grpc.CallOption) (*empty.Empty, error)
	PatchWithFieldMaskInBody(ctx context.Context, in *UpdateV2Request, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	GetQuery(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRepeatedQuery(ctx context.Context, in *ABitOfEverythingRepeated, opts ...grpc.CallOption) (*ABitOfEverythingRepeated, error)
	// Echo allows posting a StringMessage value.
	//
	// It also exposes multiple bindings.
	//
	// This makes it useful when validating that the OpenAPI v2 API
	// description exposes documentation correctly on all paths
	// defined as additional_bindings in the proto.
	Echo(ctx context.Context, in *sub.StringMessage, opts ...grpc.CallOption) (*sub.StringMessage, error)
	DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error)
	NoBindings(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error)
	Timeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ErrorWithDetails(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...grpc.CallOption) (*empty.Empty, error)
	PostWithEmptyBody(ctx context.Context, in *Body, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aBitOfEverythingServiceClient struct {
	cc *grpc.ClientConn
}

func NewABitOfEverythingServiceClient(cc *grpc.ClientConn) ABitOfEverythingServiceClient {
	return &aBitOfEverythingServiceClient{cc}
}

func (c *aBitOfEverythingServiceClient) Create(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) CreateBody(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/CreateBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Lookup(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Update(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) UpdateV2(ctx context.Context, in *UpdateV2Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/UpdateV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) PatchWithFieldMaskInBody(ctx context.Context, in *UpdateV2Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PatchWithFieldMaskInBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Delete(ctx context.Context, in *sub2.IdMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) GetQuery(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) GetRepeatedQuery(ctx context.Context, in *ABitOfEverythingRepeated, opts ...grpc.CallOption) (*ABitOfEverythingRepeated, error) {
	out := new(ABitOfEverythingRepeated)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetRepeatedQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Echo(ctx context.Context, in *sub.StringMessage, opts ...grpc.CallOption) (*sub.StringMessage, error) {
	out := new(sub.StringMessage)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...grpc.CallOption) (*ABitOfEverything, error) {
	out := new(ABitOfEverything)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/DeepPathEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) NoBindings(ctx context.Context, in *duration.Duration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/NoBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) Timeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) ErrorWithDetails(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/ErrorWithDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetMessageWithBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceClient) PostWithEmptyBody(ctx context.Context, in *Body, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PostWithEmptyBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABitOfEverythingServiceServer is the server API for ABitOfEverythingService service.
type ABitOfEverythingServiceServer interface {
	// Create a new ABitOfEverything
	//
	// This API creates a new ABitOfEverything
	Create(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	CreateBody(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	Lookup(context.Context, *sub2.IdMessage) (*ABitOfEverything, error)
	Update(context.Context, *ABitOfEverything) (*empty.Empty, error)
	UpdateV2(context.Context, *UpdateV2Request) (*empty.Empty, error)
	PatchWithFieldMaskInBody(context.Context, *UpdateV2Request) (*empty.Empty, error)
	Delete(context.Context, *sub2.IdMessage) (*empty.Empty, error)
	GetQuery(context.Context, *ABitOfEverything) (*empty.Empty, error)
	GetRepeatedQuery(context.Context, *ABitOfEverythingRepeated) (*ABitOfEverythingRepeated, error)
	// Echo allows posting a StringMessage value.
	//
	// It also exposes multiple bindings.
	//
	// This makes it useful when validating that the OpenAPI v2 API
	// description exposes documentation correctly on all paths
	// defined as additional_bindings in the proto.
	Echo(context.Context, *sub.StringMessage) (*sub.StringMessage, error)
	DeepPathEcho(context.Context, *ABitOfEverything) (*ABitOfEverything, error)
	NoBindings(context.Context, *duration.Duration) (*empty.Empty, error)
	Timeout(context.Context, *empty.Empty) (*empty.Empty, error)
	ErrorWithDetails(context.Context, *empty.Empty) (*empty.Empty, error)
	GetMessageWithBody(context.Context, *MessageWithBody) (*empty.Empty, error)
	PostWithEmptyBody(context.Context, *Body) (*empty.Empty, error)
}

func RegisterABitOfEverythingServiceServer(s *grpc.Server, srv ABitOfEverythingServiceServer) {
	s.RegisterService(&_ABitOfEverythingService_serviceDesc, srv)
}

func _ABitOfEverythingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Create(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_CreateBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).CreateBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/CreateBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).CreateBody(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Lookup(ctx, req.(*sub2.IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Update(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_UpdateV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).UpdateV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/UpdateV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).UpdateV2(ctx, req.(*UpdateV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_PatchWithFieldMaskInBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).PatchWithFieldMaskInBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PatchWithFieldMaskInBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).PatchWithFieldMaskInBody(ctx, req.(*UpdateV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub2.IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Delete(ctx, req.(*sub2.IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).GetQuery(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_GetRepeatedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverythingRepeated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).GetRepeatedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetRepeatedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).GetRepeatedQuery(ctx, req.(*ABitOfEverythingRepeated))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub.StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Echo(ctx, req.(*sub.StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_DeepPathEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABitOfEverything)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).DeepPathEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/DeepPathEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).DeepPathEcho(ctx, req.(*ABitOfEverything))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_NoBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(duration.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).NoBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/NoBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).NoBindings(ctx, req.(*duration.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).Timeout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_ErrorWithDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).ErrorWithDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/ErrorWithDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).ErrorWithDetails(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_GetMessageWithBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWithBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).GetMessageWithBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/GetMessageWithBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).GetMessageWithBody(ctx, req.(*MessageWithBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABitOfEverythingService_PostWithEmptyBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Body)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABitOfEverythingServiceServer).PostWithEmptyBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.ABitOfEverythingService/PostWithEmptyBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABitOfEverythingServiceServer).PostWithEmptyBody(ctx, req.(*Body))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABitOfEverythingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.ABitOfEverythingService",
	HandlerType: (*ABitOfEverythingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ABitOfEverythingService_Create_Handler,
		},
		{
			MethodName: "CreateBody",
			Handler:    _ABitOfEverythingService_CreateBody_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _ABitOfEverythingService_Lookup_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ABitOfEverythingService_Update_Handler,
		},
		{
			MethodName: "UpdateV2",
			Handler:    _ABitOfEverythingService_UpdateV2_Handler,
		},
		{
			MethodName: "PatchWithFieldMaskInBody",
			Handler:    _ABitOfEverythingService_PatchWithFieldMaskInBody_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ABitOfEverythingService_Delete_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _ABitOfEverythingService_GetQuery_Handler,
		},
		{
			MethodName: "GetRepeatedQuery",
			Handler:    _ABitOfEverythingService_GetRepeatedQuery_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _ABitOfEverythingService_Echo_Handler,
		},
		{
			MethodName: "DeepPathEcho",
			Handler:    _ABitOfEverythingService_DeepPathEcho_Handler,
		},
		{
			MethodName: "NoBindings",
			Handler:    _ABitOfEverythingService_NoBindings_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _ABitOfEverythingService_Timeout_Handler,
		},
		{
			MethodName: "ErrorWithDetails",
			Handler:    _ABitOfEverythingService_ErrorWithDetails_Handler,
		},
		{
			MethodName: "GetMessageWithBody",
			Handler:    _ABitOfEverythingService_GetMessageWithBody_Handler,
		},
		{
			MethodName: "PostWithEmptyBody",
			Handler:    _ABitOfEverythingService_PostWithEmptyBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

// CamelCaseServiceNameClient is the client API for CamelCaseServiceName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CamelCaseServiceNameClient interface {
	Empty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type camelCaseServiceNameClient struct {
	cc *grpc.ClientConn
}

func NewCamelCaseServiceNameClient(cc *grpc.ClientConn) CamelCaseServiceNameClient {
	return &camelCaseServiceNameClient{cc}
}

func (c *camelCaseServiceNameClient) Empty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.camelCaseServiceName/Empty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CamelCaseServiceNameServer is the server API for CamelCaseServiceName service.
type CamelCaseServiceNameServer interface {
	Empty(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterCamelCaseServiceNameServer(s *grpc.Server, srv CamelCaseServiceNameServer) {
	s.RegisterService(&_CamelCaseServiceName_serviceDesc, srv)
}

func _CamelCaseServiceName_Empty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CamelCaseServiceNameServer).Empty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.camelCaseServiceName/Empty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CamelCaseServiceNameServer).Empty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CamelCaseServiceName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.camelCaseServiceName",
	HandlerType: (*CamelCaseServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Empty",
			Handler:    _CamelCaseServiceName_Empty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

// AnotherServiceWithNoBindingsClient is the client API for AnotherServiceWithNoBindings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnotherServiceWithNoBindingsClient interface {
	NoBindings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type anotherServiceWithNoBindingsClient struct {
	cc *grpc.ClientConn
}

func NewAnotherServiceWithNoBindingsClient(cc *grpc.ClientConn) AnotherServiceWithNoBindingsClient {
	return &anotherServiceWithNoBindingsClient{cc}
}

func (c *anotherServiceWithNoBindingsClient) NoBindings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings/NoBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnotherServiceWithNoBindingsServer is the server API for AnotherServiceWithNoBindings service.
type AnotherServiceWithNoBindingsServer interface {
	NoBindings(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterAnotherServiceWithNoBindingsServer(s *grpc.Server, srv AnotherServiceWithNoBindingsServer) {
	s.RegisterService(&_AnotherServiceWithNoBindings_serviceDesc, srv)
}

func _AnotherServiceWithNoBindings_NoBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceWithNoBindingsServer).NoBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings/NoBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceWithNoBindingsServer).NoBindings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnotherServiceWithNoBindings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.AnotherServiceWithNoBindings",
	HandlerType: (*AnotherServiceWithNoBindingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoBindings",
			Handler:    _AnotherServiceWithNoBindings_NoBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/proto/examplepb/a_bit_of_everything.proto",
}

func init() {
	proto.RegisterFile("examples/proto/examplepb/a_bit_of_everything.proto", fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3)
}

var fileDescriptor_a_bit_of_everything_13e92efa8be5f8b3 = []byte{
	// 3233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x39, 0x5b, 0x6f, 0x1b, 0xc7,
	0xb9, 0x5a, 0xae, 0xae, 0xa3, 0x1b, 0x35, 0xb2, 0x65, 0x8a, 0x56, 0xa2, 0x31, 0xed, 0x24, 0x6b,
	0xc6, 0xe4, 0x4a, 0x2b, 0xd9, 0x91, 0x19, 0x24, 0x3e, 0xa4, 0x2e, 0xb6, 0x62, 0x5b, 0x96, 0xd7,
	0x8e, 0x4f, 0xe0, 0xd8, 0x11, 0x96, 0xe4, 0x50, 0x5c, 0x8b, 0xbb, 0xb3, 0xd9, 0x9d, 0x95, 0xcd,
	0xa3, 0xc3, 0x73, 0xd2, 0x0b, 0x5a, 0xb4, 0x79, 0x28, 0xc0, 0xb4, 0x0f, 0xbd, 0xa0, 0xbf, 0x20,
	0xaf, 0x7d, 0x0a, 0xd0, 0xcb, 0x43, 0x9f, 0xfa, 0xe6, 0x16, 0xfd, 0x03, 0xed, 0x43, 0x9f, 0x0a,
	0x14, 0x05, 0x02, 0x14, 0x45, 0x8b, 0x62, 0x67, 0x77, 0xc9, 0xdd, 0x25, 0x69, 0x99, 0x76, 0x90,
	0x17, 0x69, 0x67, 0xe6, 0xbb, 0x7f, 0xdf, 0x7c, 0x97, 0x21, 0x90, 0xf0, 0x13, 0x45, 0x33, 0x6a,
	0xd8, 0x12, 0x0d, 0x93, 0x50, 0x22, 0x7a, 0x4b, 0xa3, 0x28, 0x2a, 0x7b, 0x45, 0x95, 0xee, 0x91,
	0xca, 0x1e, 0x3e, 0xc4, 0x66, 0x9d, 0x56, 0x55, 0x7d, 0x3f, 0xcb, 0x60, 0xe0, 0xe2, 0xbe, 0x69,
	0x94, 0xb2, 0xfb, 0x0a, 0xc5, 0x8f, 0x95, 0x7a, 0xd6, 0x27, 0x90, 0x6d, 0xa1, 0x26, 0x17, 0xf6,
	0x09, 0xd9, 0xaf, 0x61, 0x51, 0x31, 0x54, 0x51, 0xd1, 0x75, 0x42, 0x15, 0xaa, 0x12, 0xdd, 0x72,
	0xd1, 0x93, 0xc8, 0x3b, 0x65, 0xab, 0xa2, 0x5d, 0x11, 0x2b, 0x2a, 0xae, 0x95, 0xf7, 0x34, 0xc5,
	0x3a, 0xf0, 0x20, 0x4e, 0x47, 0x21, 0xb0, 0x66, 0xd0, 0xba, 0x77, 0xf8, 0x6a, 0xf4, 0xb0, 0x6c,
	0x9b, 0x8c, 0xbe, 0x77, 0xfe, 0x46, 0x44, 0x23, 0x43, 0xa1, 0x55, 0xac, 0xdb, 0x1a, 0xfb, 0xd8,
	0x73, 0xbe, 0x7c, 0x39, 0x22, 0x80, 0x96, 0x5d, 0x14, 0x35, 0x6c, 0x59, 0xca, 0x3e, 0xf6, 0x20,
	0xce, 0x74, 0x42, 0x48, 0x11, 0x90, 0xc5, 0xa8, 0x34, 0x54, 0xd5, 0xb0, 0x45, 0x15, 0xcd, 0xf0,
	0x00, 0x2e, 0xb0, 0x7f, 0xa5, 0xcc, 0x3e, 0xd6, 0x33, 0xd6, 0x63, 0x65, 0x7f, 0x1f, 0x9b, 0x22,
	0x31, 0x98, 0x3d, 0x3a, 0x6d, 0x93, 0xfa, 0x67, 0x12, 0xc4, 0xf3, 0x05, 0x95, 0xde, 0xaa, 0x6c,
	0xb6, 0xac, 0x0e, 0x1f, 0x82, 0x49, 0x4b, 0xd5, 0xf7, 0x6b, 0x78, 0x4f, 0xc7, 0x16, 0xc5, 0xe5,
	0xc4, 0x3c, 0xe2, 0x84, 0x71, 0x69, 0x2d, 0x7b, 0x8c, 0x1f, 0xb2, 0x51, 0x4a, 0xd9, 0x1d, 0x86,
	0x2f, 0x4f, 0xb8, 0xe4, 0xdc, 0x15, 0xac, 0x82, 0x41, 0xdb, 0x56, 0xcb, 0x09, 0x0e, 0x71, 0xc2,
	0x58, 0xe1, 0x6e, 0x33, 0x7f, 0xfb, 0x13, 0x8e, 0xfb, 0x3e, 0x77, 0xfd, 0x43, 0x25, 0x53, 0xc9,
	0x67, 0xb6, 0x96, 0x32, 0x97, 0x1f, 0x1e, 0xad, 0x35, 0x32, 0xc1, 0xe5, 0x6a, 0x3f, 0xcb, 0x65,
	0xa9, 0x21, 0x33, 0x0e, 0x70, 0x17, 0x0c, 0x7b, 0x1a, 0xc4, 0x10, 0xff, 0x52, 0x1a, 0x78, 0x74,
	0xe0, 0x7b, 0x60, 0xbc, 0x52, 0x23, 0x0a, 0xdd, 0x3b, 0x54, 0x6a, 0x36, 0x4e, 0xf0, 0x88, 0x13,
	0x62, 0x85, 0xf3, 0xcd, 0xfc, 0xeb, 0xd2, 0xcc, 0x96, 0xb3, 0x8f, 0xd8, 0x3e, 0x62, 0x11, 0x96,
	0xe3, 0x97, 0xb2, 0xd2, 0x53, 0x2e, 0x88, 0x20, 0x03, 0xb6, 0xb8, 0xe7, 0x7c, 0xc3, 0x33, 0x60,
	0xa2, 0x4c, 0xec, 0x62, 0x0d, 0x7b, 0xc4, 0x06, 0x11, 0x27, 0x70, 0xf2, 0xb8, 0xbb, 0xe7, 0x82,
	0x2c, 0x82, 0x71, 0x55, 0xa7, 0x97, 0x56, 0x3d, 0x88, 0x21, 0xc4, 0x09, 0xbc, 0x0c, 0xd8, 0x56,
	0x8b, 0x86, 0x1d, 0x84, 0x18, 0x46, 0x9c, 0x30, 0x28, 0x8f, 0xdb, 0x01, 0x10, 0x97, 0xc6, 0x8a,
	0xe4, 0x41, 0x8c, 0x20, 0x4e, 0x18, 0x62, 0x34, 0x56, 0x24, 0x17, 0xe0, 0x2c, 0x98, 0xac, 0xa8,
	0x4f, 0x70, 0xb9, 0x45, 0x64, 0x14, 0x71, 0xc2, 0xb0, 0x3c, 0xe1, 0x6d, 0x86, 0x81, 0x5a, 0x74,
	0xc6, 0x10, 0x27, 0x8c, 0x78, 0x40, 0x3e, 0xa5, 0x57, 0x00, 0x28, 0x12, 0x52, 0xf3, 0x20, 0x00,
	0xe2, 0x84, 0x51, 0x79, 0xcc, 0xd9, 0x69, 0x09, 0x6b, 0x51, 0x53, 0xd5, 0xf7, 0x3d, 0x80, 0x71,
	0x27, 0x00, 0xe4, 0x71, 0x77, 0xaf, 0x25, 0x6c, 0xb1, 0x4e, 0xb1, 0xe5, 0x41, 0xbc, 0x82, 0x38,
	0x61, 0x42, 0x06, 0x6c, 0x2b, 0xa4, 0x70, 0x4b, 0x8c, 0x49, 0xc4, 0x09, 0x93, 0xae, 0xc2, 0xbe,
	0x14, 0xd7, 0x01, 0x70, 0x6e, 0x9d, 0x07, 0x30, 0x85, 0x38, 0x61, 0x4a, 0xba, 0x70, 0xac, 0xe7,
	0x77, 0x6c, 0x0d, 0x9b, 0x6a, 0x69, 0x53, 0xb7, 0x35, 0x79, 0xcc, 0xc1, 0x77, 0x89, 0xed, 0x82,
	0xe9, 0xd6, 0x3d, 0xf6, 0x28, 0xbe, 0xca, 0x28, 0x0a, 0x3d, 0x28, 0xfa, 0xd7, 0x3f, 0xbb, 0xab,
	0xd0, 0x2a, 0xa3, 0x36, 0x69, 0x78, 0x5f, 0x2e, 0x45, 0x0b, 0xcc, 0xb9, 0xc1, 0xb4, 0x17, 0x25,
	0xbc, 0xc8, 0x08, 0xbf, 0x7b, 0x1c, 0xe1, 0x9b, 0x6e, 0x42, 0xf0, 0xe9, 0x7b, 0x21, 0xda, 0x62,
	0x37, 0xab, 0x87, 0xd6, 0x2e, 0xd3, 0xd7, 0xc0, 0x94, 0x15, 0xf6, 0xdf, 0x34, 0xe2, 0x84, 0x69,
	0x79, 0xd2, 0x0a, 0x39, 0xb0, 0x05, 0xd6, 0x8a, 0x85, 0x38, 0xe2, 0x84, 0xb8, 0x0f, 0x16, 0x88,
	0x3a, 0x2b, 0xe8, 0x84, 0x19, 0xc4, 0x09, 0x33, 0xf2, 0xb8, 0x15, 0x70, 0x82, 0x07, 0xd2, 0xa2,
	0x03, 0x11, 0x27, 0x40, 0x17, 0xc4, 0xa7, 0x22, 0x81, 0x93, 0x26, 0x36, 0xb0, 0xe2, 0x98, 0x22,
	0x14, 0x17, 0xb3, 0x88, 0x17, 0xc6, 0xe4, 0x59, 0xff, 0xf0, 0x4e, 0x20, 0x3e, 0x2e, 0x83, 0x71,
	0xa2, 0x63, 0xa7, 0x48, 0x38, 0x19, 0x3a, 0x71, 0x82, 0x25, 0xa6, 0xb9, 0xac, 0x9b, 0x14, 0xb3,
	0x7e, 0x52, 0xcc, 0x6e, 0x3a, 0xa7, 0xd7, 0x06, 0x64, 0xc0, 0x80, 0xd9, 0x0a, 0x9e, 0x05, 0x13,
	0x2e, 0xaa, 0xcb, 0x2b, 0x71, 0xd2, 0x89, 0xbe, 0x6b, 0x03, 0xb2, 0x4b, 0xd0, 0x65, 0x02, 0x1f,
	0x80, 0x31, 0x4d, 0x31, 0x3c, 0x39, 0xe6, 0x58, 0xd2, 0xb8, 0xd2, 0x7f, 0xd2, 0xb8, 0xa9, 0x18,
	0x4c, 0xdc, 0x4d, 0x9d, 0x9a, 0x75, 0x79, 0x54, 0xf3, 0x96, 0xf0, 0x09, 0x98, 0xd5, 0x14, 0xc3,
	0x88, 0xea, 0x7b, 0x8a, 0xf1, 0xb9, 0xf6, 0x42, 0x7c, 0x8c, 0x90, 0x7d, 0x5c, 0x86, 0x33, 0x5a,
	0x74, 0x3f, 0xc0, 0xd9, 0x8b, 0x3d, 0x97, 0x73, 0xe2, 0xe5, 0x38, 0xbb, 0x91, 0xd7, 0xc9, 0x39,
	0xb0, 0x0f, 0x73, 0x20, 0xa1, 0x13, 0x7d, 0x9d, 0xe8, 0x87, 0x58, 0x77, 0x2a, 0x8f, 0x52, 0xdb,
	0x51, 0x34, 0x37, 0xbd, 0x25, 0x92, 0x2c, 0x01, 0xf4, 0x3c, 0x87, 0xeb, 0x60, 0xba, 0x55, 0xde,
	0x3c, 0x89, 0x4f, 0x33, 0x8f, 0x27, 0x3b, 0x3c, 0x7e, 0xd7, 0x87, 0x93, 0xa7, 0x5a, 0x28, 0x2e,
	0x91, 0x07, 0xa0, 0x15, 0x49, 0xc1, 0xcb, 0xb6, 0x80, 0xf8, 0xbe, 0xf3, 0xc2, 0x8c, 0x4f, 0xa8,
	0x7d, 0xb1, 0x3e, 0xe7, 0x40, 0x22, 0x4c, 0xbe, 0x5d, 0x64, 0x13, 0xa8, 0x7f, 0x1e, 0x85, 0x8d,
	0x66, 0x3e, 0x9f, 0x3e, 0x2d, 0x7b, 0x24, 0x91, 0xee, 0x1e, 0x21, 0x87, 0x34, 0xa2, 0x2a, 0xad,
	0x61, 0x29, 0xd5, 0xfd, 0xb0, 0x8c, 0xad, 0x92, 0xa9, 0xb2, 0x4a, 0x9f, 0x95, 0xe7, 0x82, 0x92,
	0xe6, 0x5b, 0x12, 0xc1, 0x1f, 0x72, 0xe0, 0x64, 0xdb, 0x08, 0x41, 0x59, 0xcf, 0xf4, 0x9f, 0x27,
	0x0b, 0x52, 0x33, 0x2f, 0xa6, 0xe1, 0x4e, 0xa7, 0x88, 0xf3, 0x3b, 0x3d, 0x25, 0x9b, 0x6d, 0xe5,
	0xd6, 0x80, 0x58, 0x87, 0x20, 0x19, 0x4d, 0x05, 0x01, 0xd1, 0x52, 0x4e, 0x3e, 0x28, 0xac, 0x35,
	0xf3, 0x17, 0xd3, 0x27, 0x5b, 0xba, 0xbb, 0x60, 0x1e, 0xbf, 0x85, 0xe8, 0x76, 0x88, 0x65, 0x22,
	0x9c, 0x49, 0x02, 0x7c, 0x7f, 0xc9, 0x05, 0x18, 0x7b, 0x37, 0x23, 0xc0, 0xf8, 0xec, 0xcb, 0x75,
	0x0d, 0x85, 0xad, 0x66, 0x7e, 0x3d, 0xdd, 0x96, 0xcd, 0x65, 0x80, 0x48, 0xf1, 0x11, 0x2e, 0x51,
	0x4f, 0xf2, 0xb3, 0x3d, 0x4e, 0xbb, 0x2b, 0xe0, 0xd2, 0x0d, 0x28, 0xf0, 0x53, 0x0e, 0xcc, 0x74,
	0xca, 0x7d, 0xee, 0xe5, 0xfa, 0xb5, 0xc2, 0x6a, 0x33, 0xbf, 0x9c, 0x9e, 0xdd, 0xe9, 0x22, 0x6e,
	0x72, 0xa7, 0xb7, 0x94, 0x71, 0x3d, 0x22, 0x5d, 0xf2, 0x37, 0x1c, 0x18, 0xf6, 0x9a, 0x3e, 0x08,
	0x06, 0x75, 0x45, 0xc3, 0x6e, 0xd3, 0x27, 0xb3, 0x6f, 0x38, 0x07, 0x86, 0x15, 0x8d, 0xd8, 0x3a,
	0x4d, 0xc4, 0x58, 0x15, 0xf7, 0x56, 0xf0, 0x36, 0x88, 0x91, 0x03, 0xd6, 0x5b, 0x4d, 0x49, 0xf9,
	0x17, 0x55, 0x22, 0xbb, 0x81, 0xb1, 0xc1, 0x6e, 0x6d, 0x8c, 0x1c, 0xa4, 0x16, 0xc1, 0xa8, 0xbf,
	0x86, 0x63, 0x60, 0x68, 0x2b, 0x7f, 0xe3, 0xce, 0x66, 0x7c, 0x00, 0x8e, 0x82, 0xc1, 0xbb, 0xf2,
	0xfb, 0x9b, 0x71, 0x2e, 0x77, 0xaa, 0x99, 0x3f, 0x21, 0x41, 0x18, 0x3f, 0x42, 0x29, 0x72, 0x90,
	0xca, 0xa1, 0x94, 0xb3, 0x9f, 0x42, 0x8d, 0xa4, 0x0a, 0x26, 0x43, 0xe9, 0x1c, 0xc6, 0x01, 0x7f,
	0x80, 0xeb, 0x9e, 0x22, 0xce, 0x27, 0x2c, 0x80, 0x21, 0x37, 0xa7, 0xc4, 0x5e, 0xa0, 0xd7, 0x70,
	0x51, 0x73, 0xb1, 0x35, 0x2e, 0xb9, 0x01, 0xe6, 0xba, 0x67, 0xf4, 0x2e, 0x3c, 0x4f, 0x04, 0x79,
	0x8e, 0x05, 0xa9, 0xfc, 0x9f, 0x4f, 0x25, 0x9a, 0x9d, 0xbb, 0x50, 0xd9, 0x09, 0x52, 0x79, 0x99,
	0xfe, 0xb8, 0xcd, 0x3f, 0xf7, 0xe3, 0x58, 0x33, 0xff, 0xa3, 0x18, 0xf8, 0x36, 0x97, 0x9e, 0xcd,
	0xa3, 0xa2, 0x4a, 0x11, 0xa9, 0xa0, 0xf6, 0x48, 0x27, 0x6d, 0x6f, 0xeb, 0xd4, 0xcf, 0xf4, 0x75,
	0x54, 0x22, 0x9a, 0x51, 0x53, 0x4b, 0xec, 0x02, 0x78, 0x83, 0x0e, 0xa2, 0x75, 0x03, 0x23, 0x4a,
	0x50, 0x89, 0x1c, 0x62, 0x13, 0x69, 0x8a, 0x5e, 0x47, 0x15, 0xac, 0x50, 0xdb, 0xc4, 0x96, 0x43,
	0x6b, 0xd7, 0x4f, 0xf9, 0x4f, 0x39, 0xd6, 0xe5, 0x3f, 0xe5, 0x82, 0x3d, 0xf2, 0x53, 0x2e, 0xd4,
	0x54, 0xa7, 0xef, 0x81, 0x73, 0x5b, 0xaa, 0x5e, 0x46, 0xc4, 0xa6, 0x48, 0x23, 0x26, 0x46, 0x4a,
	0xd1, 0xf9, 0xec, 0x98, 0x79, 0xb2, 0x55, 0x4a, 0x0d, 0x2b, 0x27, 0x8a, 0xfb, 0x2a, 0xad, 0xda,
	0xc5, 0x6c, 0x89, 0x68, 0xa2, 0x63, 0x8c, 0x0c, 0x2e, 0x11, 0xab, 0x6e, 0x51, 0xec, 0x2d, 0x3d,
	0xdb, 0x48, 0xab, 0x50, 0x3a, 0x42, 0x29, 0x87, 0xbf, 0x13, 0x2c, 0x4b, 0xa5, 0xca, 0xca, 0xa5,
	0x65, 0xbc, 0x9c, 0x59, 0x2d, 0xae, 0xae, 0x66, 0x56, 0xd7, 0x56, 0xca, 0x19, 0x65, 0xf9, 0xe2,
	0xe5, 0xcc, 0xc5, 0xd5, 0xb2, 0x52, 0x2c, 0x57, 0xde, 0xc2, 0x6b, 0xcb, 0xab, 0x29, 0xd4, 0x28,
	0x4c, 0xfa, 0xed, 0x0b, 0x13, 0x2e, 0xf5, 0xef, 0x51, 0x90, 0x88, 0x4a, 0xe2, 0xe7, 0x03, 0x78,
	0x19, 0xcc, 0xb3, 0x06, 0xb1, 0x95, 0x9f, 0x82, 0x83, 0x07, 0x87, 0x78, 0x21, 0x26, 0xcf, 0x39,
	0x00, 0x3e, 0xc2, 0x56, 0x7b, 0xb2, 0x78, 0x1b, 0x24, 0xc3, 0xa8, 0xa1, 0x39, 0xc3, 0x99, 0x85,
	0x38, 0xf9, 0x54, 0x10, 0x77, 0x23, 0x30, 0x73, 0x74, 0xf0, 0x0d, 0xb6, 0x71, 0x3c, 0xe2, 0x05,
	0x3e, 0xcc, 0x77, 0xbb, 0xdd, 0xd1, 0x75, 0xf0, 0x0d, 0xcd, 0x26, 0x83, 0x88, 0x17, 0x06, 0xc3,
	0x7c, 0xdf, 0x0f, 0xb4, 0x83, 0xdd, 0xf8, 0xb6, 0x3a, 0xcc, 0x21, 0xc4, 0x0b, 0x43, 0x1d, 0x7c,
	0xfd, 0x66, 0xf3, 0x1d, 0x70, 0x3a, 0x62, 0xaa, 0x50, 0x0f, 0x3b, 0x8c, 0x78, 0x61, 0x58, 0x4e,
	0x84, 0x8c, 0x15, 0x6c, 0x67, 0xbb, 0xa3, 0x07, 0x26, 0x26, 0x5e, 0x18, 0xe9, 0x82, 0xee, 0x73,
	0x7f, 0x0b, 0x24, 0xc2, 0xe8, 0x81, 0x19, 0x68, 0x14, 0xf1, 0xc2, 0xa8, 0x7c, 0x32, 0x88, 0x5b,
	0x68, 0xcd, 0x43, 0x1d, 0xe6, 0x0a, 0x75, 0x85, 0x63, 0xac, 0x0b, 0x0e, 0x99, 0x2b, 0xdc, 0x09,
	0x47, 0xcc, 0x15, 0x9c, 0x9b, 0x00, 0xe2, 0x85, 0x89, 0xb0, 0xb9, 0x0a, 0xed, 0x19, 0xaa, 0xab,
	0x9b, 0x5a, 0xea, 0x8e, 0x23, 0x5e, 0x98, 0xec, 0x74, 0x93, 0xaf, 0x2d, 0x8e, 0x6a, 0x1b, 0xe8,
	0xa9, 0x26, 0x5e, 0xa0, 0xa7, 0x0a, 0xd9, 0xa6, 0xdd, 0x57, 0x5d, 0x01, 0x0b, 0x11, 0xdb, 0x84,
	0x9d, 0x32, 0x89, 0x78, 0x61, 0x5a, 0x9e, 0x0f, 0x59, 0x27, 0x34, 0xca, 0xf4, 0x20, 0xd0, 0x0a,
	0x8a, 0x29, 0xc4, 0x0b, 0xf1, 0x6e, 0x04, 0x7a, 0x06, 0x73, 0x68, 0xe4, 0x99, 0x46, 0xbc, 0x30,
	0x13, 0xf1, 0x4e, 0xc0, 0x4a, 0x5d, 0x91, 0x03, 0x43, 0x15, 0x2f, 0xc0, 0x4e, 0x64, 0x8f, 0x73,
	0xae, 0xda, 0xcc, 0x63, 0xa9, 0x04, 0x95, 0x23, 0x94, 0xea, 0x15, 0x58, 0xa9, 0x1c, 0xfa, 0x90,
	0x9a, 0x36, 0xbe, 0x80, 0xdc, 0xbf, 0x15, 0xa5, 0x66, 0x79, 0x8b, 0x87, 0x17, 0xa2, 0x68, 0x01,
	0xb9, 0x1d, 0xbc, 0xe5, 0x0b, 0x48, 0xba, 0x80, 0x56, 0x1e, 0xa2, 0x46, 0x2a, 0x09, 0x06, 0x0b,
	0xa4, 0x5c, 0xef, 0x56, 0x9d, 0x53, 0x0f, 0xc0, 0xb4, 0x37, 0x69, 0xfe, 0xb7, 0x4a, 0xab, 0x0c,
	0x6c, 0x0a, 0xc4, 0xfc, 0x77, 0x1b, 0x39, 0xa6, 0x3a, 0x29, 0x6a, 0xb0, 0xac, 0x50, 0xc5, 0xab,
	0x1e, 0xaf, 0x1d, 0xeb, 0x77, 0x87, 0x88, 0xcc, 0x50, 0x52, 0x9f, 0x71, 0x60, 0xfa, 0x7d, 0xa3,
	0xac, 0x50, 0x7c, 0x4f, 0x92, 0xf1, 0xc7, 0x36, 0xb6, 0x28, 0x5c, 0x07, 0xbc, 0x52, 0x74, 0x85,
	0x18, 0x97, 0x96, 0xfb, 0xae, 0x45, 0xb2, 0x83, 0x0d, 0xdf, 0x06, 0xe3, 0x36, 0xa3, 0xcb, 0x1e,
	0xf8, 0x3c, 0xd1, 0x3a, 0xe7, 0x85, 0x2d, 0x15, 0xd7, 0xca, 0x37, 0x15, 0xeb, 0x40, 0x06, 0x2e,
	0xb8, 0xf3, 0x9d, 0x46, 0x60, 0x3c, 0x10, 0x9b, 0x4e, 0x7b, 0x70, 0x7f, 0x53, 0xbe, 0x15, 0x1f,
	0x80, 0x23, 0x80, 0xbf, 0xb5, 0xb3, 0x19, 0xe7, 0xa4, 0xbf, 0x2d, 0x80, 0x53, 0x51, 0xc6, 0x77,
	0xb0, 0x79, 0xa8, 0x96, 0x30, 0xfc, 0x2b, 0x0f, 0x86, 0xd7, 0x4d, 0xc7, 0xe6, 0xb0, 0x7f, 0xe9,
	0x93, 0xfd, 0xa3, 0xa4, 0xfe, 0x15, 0xfb, 0xe6, 0xef, 0xff, 0xfc, 0x59, 0xec, 0xcb, 0x58, 0xea,
	0xef, 0x31, 0xf1, 0x70, 0xd9, 0x7f, 0x4c, 0xed, 0xf6, 0x94, 0x2a, 0x1e, 0x05, 0xca, 0x47, 0x43,
	0x3c, 0x0a, 0x56, 0x84, 0x86, 0x78, 0x14, 0x88, 0xce, 0x86, 0x68, 0x61, 0x43, 0x31, 0x15, 0x4a,
	0x4c, 0xf1, 0xc8, 0x0e, 0x1d, 0x1c, 0x05, 0x22, 0xa9, 0x21, 0x1e, 0x85, 0x2e, 0x94, 0xbf, 0x0e,
	0x9c, 0xb7, 0xc3, 0xb5, 0x21, 0x1e, 0x05, 0x73, 0xdb, 0x3b, 0x16, 0x35, 0x0d, 0x13, 0x57, 0xd4,
	0x27, 0x62, 0xba, 0xe1, 0x32, 0x09, 0xa0, 0x59, 0x51, 0x3a, 0x56, 0x94, 0x91, 0x15, 0x41, 0x08,
	0x0b, 0xd9, 0x6b, 0x9c, 0x6c, 0x88, 0x47, 0xed, 0x5c, 0xd5, 0x10, 0x8f, 0x22, 0xcf, 0x2f, 0x0e,
	0x66, 0xd7, 0x77, 0x99, 0x10, 0x5e, 0xa0, 0xcd, 0x6e, 0xc0, 0x9f, 0x73, 0x00, 0xb8, 0x0e, 0x67,
	0xd7, 0xe3, 0xeb, 0x71, 0x7a, 0x9a, 0xf9, 0xfc, 0x5c, 0x6a, 0xf1, 0x18, 0x8f, 0xe7, 0xb8, 0x34,
	0xfc, 0x5f, 0x30, 0x7c, 0x83, 0x90, 0x03, 0xdb, 0x80, 0xd3, 0x59, 0xcb, 0x2e, 0x4a, 0xd9, 0xed,
	0xb2, 0x77, 0xa7, 0x5f, 0x84, 0x73, 0x96, 0x71, 0x16, 0xe0, 0xeb, 0xc7, 0xc6, 0x9a, 0xd3, 0x17,
	0x35, 0xe0, 0x77, 0x38, 0x30, 0xec, 0xde, 0xf1, 0x17, 0x31, 0x4d, 0x8f, 0x57, 0x9d, 0xd4, 0x32,
	0x93, 0xe2, 0xcd, 0xe4, 0x73, 0x4a, 0xe1, 0x98, 0xe1, 0xd7, 0x1c, 0x18, 0xf5, 0x93, 0x0d, 0x5c,
	0x3a, 0x56, 0x94, 0x48, 0x5e, 0xea, 0x29, 0xc9, 0x23, 0x26, 0x49, 0x39, 0x99, 0x16, 0x0f, 0xa5,
	0x67, 0x4b, 0xa2, 0x14, 0x71, 0xd6, 0x95, 0xc6, 0xc9, 0x51, 0xf7, 0x97, 0xa5, 0x7e, 0x51, 0xe0,
	0xcf, 0x38, 0x90, 0xd8, 0x55, 0x68, 0xa9, 0xea, 0x24, 0xe3, 0x56, 0xf2, 0xda, 0xd6, 0x59, 0xe0,
	0x7d, 0x75, 0x2a, 0x5d, 0x62, 0x2a, 0x2d, 0x49, 0x6f, 0x8a, 0x87, 0x92, 0xf2, 0xbc, 0x02, 0x72,
	0x69, 0xf8, 0x03, 0x0e, 0x0c, 0x6f, 0xe0, 0x1a, 0xa6, 0xb8, 0x33, 0xd2, 0x7a, 0xf1, 0x7a, 0xd0,
	0xcc, 0xbf, 0x59, 0x3c, 0x0f, 0xa6, 0x00, 0xc8, 0x1b, 0xea, 0x75, 0x5c, 0xcf, 0xdb, 0xb4, 0x0a,
	0x07, 0xc0, 0x29, 0x30, 0x7c, 0xcb, 0xf9, 0x94, 0xe0, 0x24, 0x18, 0x34, 0xb1, 0x52, 0x06, 0x43,
	0x8f, 0x4d, 0x95, 0x62, 0x37, 0xf8, 0xd2, 0xcf, 0x1b, 0x7c, 0x7f, 0xe2, 0xc0, 0xe8, 0x55, 0x4c,
	0x6f, 0xdb, 0xd8, 0xac, 0x7f, 0x95, 0xe1, 0xf7, 0x29, 0xd7, 0xcc, 0xdf, 0x4d, 0xed, 0x80, 0x85,
	0x6e, 0x63, 0x45, 0x8b, 0x61, 0x9f, 0xe3, 0xc4, 0x07, 0x5c, 0x71, 0x80, 0xe9, 0x97, 0x85, 0x17,
	0x8e, 0xd3, 0xef, 0x63, 0x87, 0x81, 0xaf, 0xe5, 0xa7, 0x43, 0x20, 0x7e, 0x15, 0x53, 0xbf, 0x8b,
	0x70, 0x99, 0x5f, 0xee, 0xbf, 0x74, 0x7a, 0xf8, 0xc9, 0x17, 0x47, 0x4d, 0x7d, 0x32, 0xc8, 0x34,
	0xf8, 0x07, 0x0f, 0xbf, 0xe4, 0x8f, 0xd1, 0xa1, 0xd5, 0x9a, 0x78, 0x49, 0xb8, 0xdb, 0x88, 0xd3,
	0x88, 0x9e, 0x45, 0x2a, 0x56, 0xcf, 0x19, 0xa5, 0xe3, 0xcc, 0x7e, 0xd6, 0x61, 0xb8, 0x92, 0x3c,
	0x63, 0x8a, 0xe8, 0x7e, 0xda, 0x13, 0x37, 0x54, 0xfb, 0x7a, 0x77, 0xf9, 0x9d, 0x78, 0xed, 0x2e,
	0xbe, 0xab, 0x22, 0x3d, 0x19, 0x76, 0x96, 0xb6, 0x1e, 0xad, 0x73, 0x8f, 0xe3, 0x9e, 0x7a, 0x5a,
	0xcf, 0xe2, 0x1a, 0x2a, 0xbd, 0xf0, 0xb7, 0x3c, 0x18, 0xdc, 0x2c, 0x55, 0x09, 0xec, 0xf5, 0xe3,
	0x88, 0x65, 0x17, 0xb3, 0xee, 0x10, 0xe3, 0x27, 0x87, 0xe7, 0x86, 0x4c, 0xfd, 0x25, 0xd6, 0xcc,
	0x7f, 0x23, 0x06, 0x26, 0x70, 0xa9, 0x4a, 0x90, 0xe5, 0xb6, 0x5c, 0x60, 0x94, 0xad, 0x4c, 0xa3,
	0x04, 0x67, 0xee, 0xd8, 0x9a, 0xa6, 0x98, 0xf5, 0x1c, 0xda, 0xf4, 0xb6, 0x92, 0xf1, 0x8d, 0xf6,
	0xf3, 0x14, 0xdb, 0x4d, 0x6d, 0x00, 0x18, 0xbe, 0xb6, 0x4c, 0xda, 0x3e, 0x2f, 0xeb, 0x7b, 0x57,
	0x00, 0x7f, 0x71, 0x69, 0x05, 0xae, 0x81, 0x4b, 0x32, 0xa6, 0xb6, 0xa9, 0xe3, 0x32, 0x7a, 0x5c,
	0xc5, 0x3a, 0xa2, 0x55, 0x8c, 0x4c, 0x6c, 0x11, 0xdb, 0x2c, 0x61, 0xa4, 0x5a, 0x88, 0x62, 0xcd,
	0x20, 0xa6, 0x62, 0xaa, 0xb5, 0x3a, 0xb2, 0x75, 0xe5, 0x50, 0x51, 0x6b, 0x4a, 0xb1, 0x86, 0xb3,
	0xef, 0xbd, 0x0d, 0xf8, 0xd5, 0xa5, 0x55, 0xb8, 0x0a, 0xd2, 0xcf, 0x20, 0x50, 0x26, 0xd8, 0x42,
	0x3a, 0xa1, 0x08, 0x3f, 0x51, 0x2d, 0x9a, 0x85, 0xc3, 0x60, 0xf0, 0x27, 0x31, 0x8e, 0x67, 0x97,
	0xec, 0xe1, 0xf1, 0x69, 0xc2, 0x31, 0x8c, 0x78, 0xe4, 0x3a, 0xe6, 0xfe, 0x7c, 0x2a, 0x1e, 0x2c,
	0x38, 0xce, 0x59, 0xce, 0x7d, 0xb2, 0xb9, 0x0f, 0x61, 0xc7, 0x11, 0xfc, 0x05, 0x07, 0x26, 0x36,
	0x30, 0x36, 0xd8, 0x6f, 0x48, 0xce, 0xc6, 0xd7, 0xd3, 0xd9, 0x5c, 0x61, 0xba, 0x5d, 0x4e, 0xad,
	0x1e, 0x9b, 0xe2, 0x43, 0x3f, 0x4f, 0x67, 0x9d, 0x71, 0x85, 0x55, 0xa1, 0x3c, 0x00, 0x3b, 0xa4,
	0xa0, 0xea, 0x65, 0x55, 0xdf, 0xb7, 0xe0, 0x7c, 0x47, 0x06, 0xdf, 0xf0, 0x7e, 0xb9, 0xef, 0x99,
	0xdc, 0x07, 0xe0, 0x3d, 0x30, 0x72, 0x57, 0xd5, 0x30, 0xb1, 0x29, 0xec, 0x01, 0xd4, 0x13, 0xf9,
	0x34, 0x13, 0xff, 0x24, 0x9c, 0x0d, 0xda, 0x93, 0x7a, 0xc4, 0xaa, 0x20, 0xbe, 0x69, 0x9a, 0xc4,
	0x74, 0xca, 0xf7, 0x06, 0xa6, 0x8a, 0x5a, 0xb3, 0xfa, 0x66, 0x70, 0x8e, 0x31, 0x78, 0x15, 0x2e,
	0x84, 0x1c, 0xe6, 0x50, 0x7d, 0xac, 0xd2, 0x6a, 0xd9, 0xa3, 0xfa, 0x5d, 0x0e, 0xc0, 0xab, 0x98,
	0x46, 0x67, 0xb7, 0xe3, 0x7b, 0x84, 0x08, 0x46, 0x4f, 0x31, 0xde, 0x60, 0x62, 0x9c, 0x49, 0xcd,
	0x07, 0xc5, 0x70, 0x24, 0x28, 0x92, 0x72, 0x5d, 0x3c, 0x72, 0x3a, 0x02, 0x36, 0xe3, 0xc1, 0x6f,
	0x71, 0x60, 0x66, 0x97, 0x58, 0xd4, 0xa1, 0xc8, 0x50, 0x99, 0x20, 0xcf, 0x37, 0x26, 0xf6, 0xe4,
	0x2e, 0x32, 0xee, 0xe7, 0x53, 0xe7, 0x82, 0xdc, 0x0d, 0x62, 0x51, 0x47, 0x02, 0xf6, 0xab, 0xa0,
	0x2b, 0x86, 0x1f, 0x14, 0xc9, 0x5f, 0x71, 0xcd, 0xfc, 0x17, 0x1c, 0xac, 0xf4, 0x98, 0xda, 0x82,
	0x6f, 0xd8, 0x28, 0x93, 0x41, 0x8f, 0xab, 0x6a, 0xa9, 0x8a, 0xac, 0x2a, 0xb1, 0x6b, 0x65, 0x76,
	0xfd, 0x8a, 0x18, 0xd9, 0x16, 0x2e, 0x23, 0x55, 0x47, 0x46, 0x4d, 0x29, 0x61, 0x44, 0x2a, 0xec,
	0xa2, 0x96, 0x49, 0xc9, 0xd6, 0xb0, 0xee, 0xce, 0x02, 0xa8, 0x44, 0x34, 0x67, 0x71, 0x26, 0x79,
	0x1b, 0x2c, 0x76, 0xeb, 0x0c, 0x9c, 0x6b, 0xe4, 0xcf, 0x89, 0xfd, 0xbe, 0x35, 0x3e, 0x02, 0x27,
	0x4a, 0x8a, 0x86, 0x6b, 0xeb, 0x8a, 0x85, 0x3d, 0x1a, 0xce, 0x50, 0x03, 0x65, 0x30, 0xe4, 0xfe,
	0xb4, 0xd9, 0x6f, 0x20, 0xcd, 0x33, 0x1b, 0xce, 0xc2, 0x99, 0x50, 0x20, 0x39, 0x47, 0xd2, 0x47,
	0x60, 0x21, 0xaf, 0x13, 0x5a, 0xc5, 0xa6, 0xc7, 0xc9, 0x71, 0x5e, 0xe0, 0x52, 0xbd, 0x1b, 0xba,
	0x62, 0xfd, 0x32, 0x1e, 0x28, 0x7c, 0x31, 0xd2, 0xcc, 0x7f, 0x3e, 0x02, 0xff, 0xc0, 0x81, 0xd9,
	0x3c, 0x2a, 0xb8, 0xaf, 0xc3, 0x81, 0x14, 0xf0, 0x01, 0x38, 0xb1, 0x2f, 0xef, 0xae, 0x67, 0xae,
	0xba, 0xaa, 0x23, 0xc3, 0x24, 0x8f, 0x70, 0x89, 0xf6, 0x6b, 0xb2, 0x64, 0x5c, 0x27, 0x3a, 0xfe,
	0x2f, 0x4f, 0x35, 0x07, 0x3a, 0xfd, 0x11, 0x38, 0x51, 0xb8, 0xb3, 0x81, 0x56, 0x32, 0xeb, 0x35,
	0xc5, 0xb6, 0x30, 0xba, 0xa1, 0x96, 0xb0, 0x6e, 0x61, 0xb8, 0xd5, 0x1f, 0x65, 0xb1, 0x58, 0x23,
	0x45, 0x51, 0x53, 0x2c, 0x8a, 0x4d, 0xf1, 0xc6, 0xf6, 0xfa, 0xe6, 0xce, 0x9d, 0xcd, 0x2c, 0x7d,
	0x42, 0x25, 0x7e, 0x39, 0xbb, 0x94, 0xe6, 0xb9, 0xd8, 0xa0, 0x14, 0x57, 0x0c, 0xf7, 0x4d, 0x5b,
	0x25, 0xba, 0xf8, 0xc8, 0x22, 0xba, 0x34, 0x17, 0xdc, 0x79, 0x92, 0xa9, 0x10, 0x92, 0xd1, 0x54,
	0x0d, 0xe7, 0x3a, 0x20, 0x73, 0x3d, 0x20, 0xe5, 0x5d, 0xa7, 0x62, 0xac, 0xc0, 0x6d, 0x70, 0xb5,
	0xb3, 0x62, 0xd8, 0x16, 0x36, 0xdb, 0xd5, 0xa2, 0xaa, 0x1c, 0x62, 0x64, 0x60, 0x53, 0x53, 0x2d,
	0xcb, 0x09, 0x4c, 0x4a, 0x90, 0x52, 0x2a, 0x61, 0xcb, 0x0a, 0x55, 0x97, 0xac, 0xfc, 0x12, 0x35,
	0x68, 0x44, 0xbe, 0x06, 0xf8, 0xd5, 0xe5, 0x35, 0x98, 0x07, 0x93, 0xdb, 0x6f, 0x68, 0x48, 0x41,
	0x14, 0x2b, 0x06, 0xa1, 0x59, 0xb8, 0x04, 0xb2, 0xc9, 0xbe, 0x9e, 0xff, 0xee, 0x7f, 0x2f, 0x06,
	0xa6, 0xc1, 0x58, 0x41, 0xb1, 0xd4, 0x12, 0xeb, 0xff, 0x63, 0xa3, 0x1c, 0x78, 0x25, 0x34, 0x11,
	0x4c, 0x8f, 0xc6, 0x92, 0x63, 0x1f, 0x64, 0xf2, 0xbb, 0xdb, 0x99, 0xeb, 0xb8, 0x8e, 0x62, 0xe0,
	0x8f, 0x5c, 0x6b, 0x42, 0xf8, 0x1d, 0x37, 0xca, 0x0b, 0x83, 0xd2, 0x59, 0xdf, 0x87, 0x01, 0x87,
	0x8b, 0x44, 0xb1, 0x69, 0x55, 0x74, 0xfe, 0x10, 0x53, 0xfd, 0x1f, 0x9c, 0x5b, 0xec, 0x0d, 0x44,
	0xc9, 0x01, 0xd6, 0x0b, 0xff, 0x0f, 0x92, 0xee, 0xc0, 0x01, 0xe1, 0x55, 0x53, 0xd1, 0xa9, 0x85,
	0x9c, 0x85, 0x67, 0x3d, 0xb0, 0xe0, 0x8d, 0x21, 0x70, 0xd6, 0x3b, 0x64, 0x2b, 0xff, 0x74, 0x1d,
	0x0c, 0x29, 0x65, 0x4d, 0xd5, 0x61, 0x2e, 0x84, 0xaa, 0x97, 0x43, 0x60, 0xcc, 0x19, 0x0e, 0x98,
	0x6a, 0x51, 0xa7, 0x12, 0x1d, 0x62, 0xa4, 0xea, 0x15, 0x62, 0x6a, 0xcc, 0xdf, 0xc5, 0x45, 0x30,
	0x19, 0x34, 0xc5, 0x40, 0x74, 0x34, 0x2a, 0x9e, 0xef, 0x39, 0x1c, 0x45, 0x41, 0xcd, 0x6d, 0x70,
	0xea, 0x66, 0x3b, 0xfb, 0x04, 0xef, 0x54, 0xbf, 0x77, 0xe9, 0xfe, 0x58, 0xcb, 0x73, 0xc5, 0x61,
	0x76, 0x9f, 0x57, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x35, 0xba, 0x1f, 0xec, 0xc6, 0x27, 0x00,
	0x00,
}
